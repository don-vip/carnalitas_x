carnx_travel_on_departure = {
	effect = {
		var:carnx_travel_sender ?= { save_scope_as = sender }
		var:carnx_travel_recipient ?= { save_scope_as = recipient }

		# Send departure messages
		carnx_travel_send_messages_effect = {
			SENDER = scope:sender
			RECIPIENT = scope:recipient
			TITLE = carnx_msg_departed_for_court
			TEXT = carnx_departed_for_court_tt
		}

		carnx_debug_log_effect = { MSG = carnx_debug_msg_character_departed }
	}
}

carnx_travel_on_arrival = {
	effect = {
		var:carnx_travel_sender ?= { save_scope_as = sender }
		var:carnx_travel_recipient ?= { save_scope_as = recipient }

		if = {
			limit = {
				scope:recipient ?= {
					carnx_travel_is_valid_recipient_trigger = yes
				}
			}

			# Set location to recipient's capital province
			if = {
				limit = {
					NOT = { location = scope:recipient.capital_province }
				}
				set_location = scope:recipient.capital_province
			}
		}

		# Send arrival messages
		carnx_travel_send_messages_effect = {
			SENDER = scope:sender
			RECIPIENT = scope:recipient
			TITLE = carnx_msg_arrived_at_court
			TEXT = carnx_arrived_at_court_tt
		}

		# Remove travel variables
		carnx_travel_remove_variables_effect = yes

		carnx_debug_log_effect = { MSG = carnx_debug_msg_character_arrived }
	}
}

# Arrival in any province during travel
on_travel_plan_movement = {
	on_actions = { carnx_on_travel_plan_movement }
}

carnx_on_travel_plan_movement = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_moved }

		var:carnx_travel_sender ?= { save_scope_as = sender }
		var:carnx_travel_recipient ?= { save_scope_as = recipient }

		if = {
			limit = {
				scope:recipient ?= {
					carnx_travel_is_valid_recipient_trigger = no
				}
			}

			if = {
				limit = {
					liege ?= {
						carnx_travel_is_valid_recipient_trigger = yes
					}
				}

				# Set travel variables
				carnx_travel_set_variables_effect = {
					SENDER = scope:sender
					RECIPIENT = liege
				}

				# Reroute to home
				current_travel_plan = {
					reroute_to_home = yes
				}

				carnx_debug_log_effect = { MSG = carnx_debug_msg_character_rerouted_to_home }
			}
			else = {
				# Remove travel variables
				carnx_travel_remove_variables_effect = yes

				# Cancel travel
				current_travel_plan = {
					cancel_travel_plan = yes
				}

				carnx_debug_log_effect = { MSG = carnx_debug_msg_character_travel_cancelled }
			}
		}
	}
}

# Starting a travel plan (starting to travel to the first destination)
on_travel_plan_start = {
	on_actions = { carnx_on_travel_plan_start }
}

carnx_on_travel_plan_start = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_started }
	}
}

# Arrival in a destination province during travel (a travel plan can have multiple sequential destinations)
on_travel_plan_arrival = {
	on_actions = { carnx_on_travel_plan_arrival }
}

carnx_on_travel_plan_arrival = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_arrived }
	}
}

# Completed a travel plan (arrived at final destination, or completed through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
on_travel_plan_complete = {
	on_actions = { carnx_on_travel_plan_complete }
}

carnx_on_travel_plan_complete = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_completed }
	}
}

# Aborted a travel plan (travel plan was not completed, or aborted through script)
# A travel plan ends either via 'on_travel_plan_complete' or 'on_travel_plan_abort'
# This usually means everyone gets teleported to their default location after this.
on_travel_plan_abort = {
	on_actions = { carnx_on_travel_plan_abort }
}

carnx_on_travel_plan_abort = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_aborted }
	}
}

# Cancelled a travel plan. Travel plan was cancelled by player interaction, and has
# been rerouted back home. (the travel plan doesn't end yet until they arrive home)
# People in the travel plan were removed from associated activities.
on_travel_plan_cancel = {
	on_actions = { carnx_on_travel_plan_cancel }
}

carnx_on_travel_plan_cancel = {
	trigger = {
		has_variable = carnx_travel_sender
		has_variable = carnx_travel_recipient
	}

	effect = {
		#carnx_debug_log_effect = { MSG = carnx_debug_msg_travel_cancelled }
	}
}