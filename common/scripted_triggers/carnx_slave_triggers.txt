carnx_candidate_to_interact_with_trigger = {
	NOT = { this = scope:actor }
	highest_held_title_tier >= tier_county
	is_diplomatically_available = yes
	in_diplomatic_range = scope:actor
	NOT = { is_at_war_with = scope:actor }
	is_imprisoned = no
}

carnx_candidate_to_sell_slave_to_trigger = {
	carnx_candidate_to_interact_with_trigger = yes
	is_ai = yes
	short_term_gold > 1
}

carnx_candidate_to_buy_slave_from_trigger = {
	carnx_candidate_to_interact_with_trigger = yes
	is_ai = yes
}

carnx_candidate_to_gift_slave_to_trigger = {
	carnx_candidate_to_interact_with_trigger = yes
}

carnx_candidate_to_ransom_slave_trigger = {
	carnx_candidate_to_interact_with_trigger = yes
}

carnx_slave_can_be_freed_trigger = {
	NOR = {
		has_character_flag = carn_slave_cannot_be_freed
		has_trait_with_flag = carn_slave_cannot_be_freed
	}
	trigger_if = {
		limit = { exists = imprisoner }
		has_relation_slave_owner = imprisoner
	}
}

carnx_buy_sell_slave_recipient_trigger = {
	$RULER$ = {
		is_ruler = yes
	}
	OR = {
		any_neighboring_and_across_water_top_liege_realm_owner = {
			this = $RULER$
		}
		trigger_if = {
			limit = { exists = top_liege }
			top_liege = {
				any_vassal_or_below = {
					this = $RULER$
				}
			}
		}
		trigger_if = {
			limit = { NOT = { exists = top_liege } }
			any_vassal_or_below = {
				this = $RULER$
			}
		}
	}
}

carnx_has_important_role_trigger = {
	any_relation = {
		type = ward
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = guardian
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = mentor
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
	any_relation = {
		type = student
		OR = {
			this = $RULER$
			is_close_family_of = $RULER$
		}
	}
}

# Does the scoped character have a valid reason to execute $CHARACTER$.
# In addition to having an explicit execute reason, this also includes
# $CHARACTER$ being a rival / nemesis, a cheating spouse, or a ruler you can inherit land from.
carnx_has_execute_reason_trigger = {
	OR = {
		has_execute_reason = $CHARACTER$
		has_relation_rival = $CHARACTER$ # Execute rivals
		has_relation_nemesis = $CHARACTER$ # Execute rivals
		$CHARACTER$ = {
			is_spouse_of = prev
			exposed_cheating_on_spouse_trigger = { SPOUSE = prev }
		}
		any_heir_title = { # Execute rulers you can inherit land from
			exists = holder
			holder = $CHARACTER$
			place_in_line_of_succession = {
				target = prev
				value > 2
			}
		}
	}
}

# Is the scoped character a family or a positive relation of $CHARACTER$.
carnx_is_family_or_positive_relation_trigger = {
	OR = {
		has_relation_best_friend = $CHARACTER$
		has_relation_soulmate = $CHARACTER$
		has_relation_friend = $CHARACTER$
		has_relation_lover = $CHARACTER$
		has_secret_relation_lover = $CHARACTER$
		has_relation_crush = $CHARACTER$
		is_spouse_of = $CHARACTER$
		is_close_or_extended_family_of = $CHARACTER$
		dynasty = $CHARACTER$.dynasty
	}
	NOR = {
		has_relation_rival = $CHARACTER$
		has_relation_nemesis = $CHARACTER$
	}
}

carnx_gift_slave_recipient_trigger = {
	OR = {
		# Generous characters will give gifts to their friends/lovers
		AND = {
			OR = {
				has_secret_relation_lover = scope:actor
				has_relation_lover = scope:actor
				has_relation_soulmate = scope:actor
				has_relation_friend = scope:actor
				has_relation_best_friend = scope:actor
			}
			scope:actor = {
				OR = {
					ai_greed <= high_negative_ai_value
					AND = {
						ai_greed < 0
						culture = {
							has_cultural_parameter = gives_more_gifts
						}
					}
				}
			}
		}

		# Characters with the Generous Cultural Tradition will give gifts to more people
		AND = {
			is_ruler = yes
			OR = {
				is_allied_to = scope:actor
				is_close_or_extended_family_of = scope:actor
			}
			scope:actor = {
				ai_greed < 0
				culture = {
					has_cultural_parameter = gives_more_gifts
				}
			}
		}

		# Characters with the loyal trait more likely to give gifts to friends
		AND = {
			OR = {
				has_relation_friend = scope:actor
				has_relation_best_friend = scope:actor
				is_allied_to = scope:actor
				is_close_or_extended_family_of = scope:actor
			}
			scope:actor = {
				ai_greed <= 0
				has_trait = loyal
			}
		}

		# Powerful vassals should be considered
		AND = {
			is_powerful_vassal_of = scope:actor
			opinion = {
				target = scope:actor
				value < 0
			}
			NOT ={
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Factioneering vassals should be considered
		AND = {
			is_vassal_of = scope:actor
			is_a_faction_member = yes
			NOT ={
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Realm Priests should be considered
		AND = {
			scope:actor = {
				faith = { has_doctrine = doctrine_theocracy_temporal }
				exists = cp:councillor_court_chaplain
				cp:councillor_court_chaplain = scope:recipient
			}
			opinion = {
				target = scope:actor
				value <= 25
			}
			NOT = {
				has_opinion_modifier = {
					target = scope:actor
					modifier = gift_opinion
				}
			}
		}

		# Independent ruler within the struggle should be considered
		AND = {
			any_character_struggle = {
				phase_has_catalyst = catalyst_gift_independent_ruler
			}
		}
	}
}

# Is owning slaves of $CHARACTER$'s faith shunned according to the scoped character's faith.
carnx_is_slavery_shunned_trigger = {
	OR = {
		faith = {
			has_doctrine = carn_doctrine_same_slavery_shunned
			faith_hostility_level = {
				target = $CHARACTER$.faith
				value < faith_hostile_level
			}
		}
		faith = {
			has_doctrine = carn_doctrine_other_slavery_shunned
			faith_hostility_level = {
				target = $CHARACTER$.faith
				value >= faith_hostile_level
			}
		}
	}
}

# Is owning slaves of $CHARACTER$'s faith a crime according to the scoped character's faith.
carnx_is_slavery_crime_trigger = {
	$CHARACTER$ = { save_temporary_scope_as = other }
	OR = {
		faith = {
			has_doctrine = carn_doctrine_same_slavery_crime
			faith_hostility_level = {
				target = scope:other.faith
				value < faith_hostile_level
			}
		}
		faith = {
			has_doctrine = carn_doctrine_other_slavery_crime
			faith_hostility_level = {
				target = scope:other.faith
				value >= faith_hostile_level
			}
		}
	}
}

carnx_is_useful_slave_to_future_owner_trigger = {
	OR = {
		carnx_can_serve_as_chancellor_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_marshal_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_steward_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_spymaster_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_court_chaplain_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_knight_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_commander_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_court_physician_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_antiquarian_trigger = { RULER = $RULER$ }
		carnx_can_serve_as_slave_concubine_trigger = { RULER = $RULER$ }
		carnx_has_useful_claims_trigger = { RULER = $RULER$ }
		carnx_is_attractive_to_character_trigger = { CHARACTER = $RULER$ }
		carnx_is_visibly_fertile_female_trigger = yes
	}
}

carnx_is_useful_slave_to_current_owner_trigger = {
	OR = {
		is_councillor_of = $RULER$
		AND = {
			has_any_court_position = yes
			any_court_position_employer = { this = $RULER$ }
		}
		is_knight_of = $RULER$
		is_commanding_army = yes
		carnx_has_important_role_trigger = { RULER = $RULER$ }
		carnx_has_useful_claims_trigger = { RULER = $RULER$ }
		carnx_is_attractive_to_character_trigger = { CHARACTER = $RULER$ }
		carnx_is_visibly_fertile_female_trigger = yes
	}
}

carnx_can_serve_as_chancellor_trigger = {
	diplomacy > decent_skill_rating
	can_be_chancellor_trigger = { COURT_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			NOT = { exists = cp:councillor_chancellor }
			cp:councillor_chancellor = { diplomacy <= decent_skill_rating }
		}
	}
}

carnx_can_serve_as_marshal_trigger = {
	martial > decent_skill_rating
	can_be_marshal_trigger = { COURT_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			NOT = { exists = cp:councillor_marshal }
			cp:councillor_marshal = { martial <= decent_skill_rating }
		}
	}
}

carnx_can_serve_as_steward_trigger = {
	stewardship > decent_skill_rating
	can_be_steward_trigger = { COURT_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			NOT = { exists = cp:councillor_steward }
			cp:councillor_steward = { stewardship <= decent_skill_rating }
		}
	}
}

carnx_can_serve_as_spymaster_trigger = {
	intrigue > decent_skill_rating
	can_be_spymaster_trigger = { COURT_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			NOT = { exists = cp:councillor_spymaster }
			cp:councillor_spymaster = { intrigue <= decent_skill_rating }
		}
	}
}

carnx_can_serve_as_court_chaplain_trigger = {
	learning > decent_skill_rating
	can_be_court_chaplain_trigger = { COURT_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			NOT = { exists = cp:councillor_court_chaplain }
			cp:councillor_court_chaplain = { learning <= decent_skill_rating }
		}
	}
}

carnx_can_serve_as_knight_trigger = {
	prowess > decent_skill_rating
	can_be_knight_trigger = { ARMY_OWNER = $RULER$ }
	$RULER$ = {
		OR = {
			number_of_knights < max_number_of_knights
			any_knight = {
				prowess <= decent_skill_rating
			}
		}
	}
}

carnx_can_serve_as_commander_trigger = {
	martial >= decent_skill_rating
	can_be_commander_basic_trigger = { ARMY_OWNER = $RULER$ }
	number_of_commander_traits >= 1
	$RULER$ = {
		NOR = {
			any_vassal = {
				martial >= decent_skill_rating
				can_be_commander_basic_trigger = { ARMY_OWNER = $RULER$ }
				number_of_commander_traits >= 1
			}
			any_courtier = {
				martial >= decent_skill_rating
				can_be_commander_basic_trigger = { ARMY_OWNER = $RULER$ }
				number_of_commander_traits >= 1
			}
		}
	}
}

carnx_can_serve_as_court_physician_trigger = {
	aptitude:court_physician_court_position > poor_effectiveness
	can_be_employed_as = court_physician_court_position
	$RULER$ = {
		can_employ_court_position_type = court_physician_court_position
		OR = {
			NOT = { employs_court_position = court_physician_court_position }
			any_court_position_holder = {
				type = court_physician_court_position
				this.aptitude:court_physician_court_position <= poor_effectiveness
			}
		}
	}
}

carnx_can_serve_as_antiquarian_trigger = {
	aptitude:antiquarian_court_position > poor_effectiveness
	can_be_employed_as = antiquarian_court_position
	$RULER$ = {
		can_employ_court_position_type = antiquarian_court_position
		OR = {
			NOT = { employs_court_position = antiquarian_court_position }
			any_court_position_holder = {
				type = antiquarian_court_position
				this.aptitude:antiquarian_court_position <= poor_effectiveness
			}
		}
	}
}

carnx_can_serve_as_slave_concubine_trigger = {
	save_temporary_scope_as = can_serve_as_slave_concubine
	aptitude:carnx_slave_concubine_court_position > poor_effectiveness
	can_be_employed_as = carnx_slave_concubine_court_position
	$RULER$ = {
		can_employ_court_position_type = carnx_slave_concubine_court_position
		OR = {
			any_court_position_holder = {
				type = carnx_slave_concubine_court_position
				count < $RULER$.carnx_number_of_desired_slave_concubines
			}
			any_court_position_holder = {
				type = carnx_slave_concubine_court_position
				this.aptitude:carnx_slave_concubine_court_position <= poor_effectiveness
			}
		}
		carnx_allowed_to_marry_trigger = { CHARACTER = scope:can_serve_as_slave_concubine }
	}
}

carnx_has_useful_claims_trigger = {
	any_claim = {
		neighboring_useful_courtier_or_guest_claim_trigger = { RULER = $RULER$ }
	}
}

carnx_is_attractive_to_character_trigger = {
	$CHARACTER$ = {
		is_attracted_to_gender_of = prev
	}
	attraction > 0
}

carnx_is_visibly_fertile_female_trigger = {
	is_female = yes
	is_visibly_fertile = yes
}

is_diplomatically_available = {
	is_busy_in_events_localised = yes
}
